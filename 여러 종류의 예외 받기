#include <iostream>
#include<string>
int func(int c){
  if(c == 1){
    throw 10;
  }else if(c == 2){
    throw std::string("hi!");
  }else if(c == 3){
    throw 'a';
  }else if(c == 4){
    throw "hello!";
  }
  return 0;
}

int main(){
  int c;
  std::cin >> c;

  try{
    func(c);
  }catch(char x){
    std::cout << "Char : " << x << std::endl;
  }catch(int x){
    std::cout << "Int : " << x << std::endl;
  }catch(std::string& s){
    std::cout << "String : " << s << std::endl;
  }catch (const char* s){
    std::cout << "String Literal : " << s << std::endl;
  }
}

//==============================================================
#include <exception>
#include <iostream>
class Parent : public std::exception {
public:
virtual const char* what() const noexcept override { return "Parent!\n"; }
};
class Child : public Parent {
public:
const char* what() const noexcept override { return "Child!\n"; }
};
int func(int c) {
if (c == 1) {
throw Parent();
} else if (c == 2) {
throw Child();
}
return 0;
}
int main() {
int c;
std::cin >> c;
try {
func(c);
} catch (Parent& p) {
std::cout << "Parent Catch!" << std::endl;
std::cout << p.what();
} catch (Child& c) {
std::cout << "Child Catch!" << std::endl;
std::cout << c.what();
}
}
//==============================================================

#include <exception>
#include <iostream>


class Parent : public std::exception {
public:
virtual const char* what() const noexcept override { return "Parent!\n"; }
};


class Child : public Parent {
public:
const char* what() const noexcept override { return "Child!\n"; }
};


int func(int c) {
if (c == 1) {
throw Parent();
} else if (c == 2) {
throw Child();
}
return 0;
}


int main() {
int c;
std::cin >> c;

  
try {
func(c); 
} catch (Child& c) {
std::cout << "Child Catch!" << std::endl;
std::cout << c.what();


  } catch (Parent& p) {
  std::cout << "Parent Catch!" << std::endl;
  std::cout << p.what();
}
}
//clear!
//==============================================================

//==============================================================



